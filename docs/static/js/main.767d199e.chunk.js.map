{"version":3,"sources":["components/Form.js","components/Appointment.js","App.js","serviceWorker.js","index.js"],"names":["Form","createAppointment","useState","pet","owner","date","time","symptom","appointment","setAppointment","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Appointment","deleteAppointmentForId","onClick","App","appointmentsInit","JSON","parse","localStorage","getItem","appointments","setAppointments","useEffect","setItem","stringify","newAppointments","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.767d199e.chunk.js","sourcesContent":["import React, { Fragment, useState }  from 'react';\r\nimport uuid from 'uuid/v4';\r\n\r\nconst Form = ({ createAppointment }) => {\r\n\r\n    // Crear State de Citas\r\n    const [appointment, setAppointment] = useState({\r\n        pet: '',\r\n        owner: '',\r\n        date: '',\r\n        time: '',\r\n        symptom: ''\r\n    });\r\n\r\n    const [error, setError] = useState(null);\r\n\r\n    // Función que se ejecuta cuando el usuario escribe\r\n    const handleChange = e => {\r\n        setAppointment({\r\n            ...appointment,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    // Extraer los valores\r\n    const { pet, owner, date, time, symptom } = appointment;\r\n\r\n    const submitAppointment = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar\r\n        if(!pet || pet.trim() === '') {\r\n            setError('Mascota');\r\n            return;\r\n        }\r\n\r\n        if(!owner || owner.trim() === '') {\r\n            setError('Propietario');\r\n            return;\r\n        }\r\n\r\n        if(!date || date.trim() === '') {\r\n            setError('Fecha');\r\n            return;\r\n        }\r\n\r\n        if(!time || time.trim() === '') {\r\n            setError('Hora');\r\n            return;\r\n        }\r\n\r\n        if(!symptom || symptom.trim() === '') {\r\n            setError('Síntomas');\r\n            return;\r\n        }\r\n\r\n        //Eliminar mensaje previo\r\n        setError(null);\r\n\r\n        // Asignar un _id\r\n        appointment.id = uuid();\r\n\r\n        // Crear la cita\r\n        createAppointment(appointment);\r\n\r\n        // Reiniciar el form\r\n        setAppointment({\r\n            pet: '',\r\n            owner: '',\r\n            date: '',\r\n            time: '',\r\n            symptom: ''\r\n        });\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            { error ? <p className=\"error-alert\">El campo {error} es obligatorio</p>\r\n            : null }\r\n\r\n            <form\r\n                onSubmit={submitAppointment}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"pet\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={handleChange}\r\n                    value={pet}\r\n                />\r\n                <label>Nombre Propietario</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"owner\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Propietario de Mascota\"\r\n                    onChange={handleChange}\r\n                    value={owner}\r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={date}\r\n                />\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"time\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={time}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    name=\"symptom\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={symptom}\r\n                >\r\n                </textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >\r\n                    Agregar Cita\r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Appointment = ({ appointment, deleteAppointmentForId }) => (\r\n    <div className=\"appointment\">\r\n        <p>Mascota: <span>{appointment.pet}</span></p>\r\n        <p>Propietario: <span>{appointment.owner}</span></p>\r\n        <p>Fecha: <span>{appointment.date}</span></p>\r\n        <p>Hora: <span>{appointment.time}</span></p>\r\n        <p>Síntomas: <span>{appointment.symptom}</span></p>\r\n\r\n        <button\r\n            className=\"button delete u-full-width\"\r\n            onClick={ () =>  deleteAppointmentForId(appointment.id) }\r\n        >Eliminar &times;</button>\r\n    </div>\r\n)\r\n \r\nexport default Appointment;\r\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Appointment from './components/Appointment';\n\nfunction App() {\n\n    // Citas inciales\n    let appointmentsInit = JSON.parse(localStorage.getItem('appointments'));\n    if (!appointmentsInit) {\n        appointmentsInit = [];\n    }\n\n    const [appointments, setAppointments] = useState(appointmentsInit);\n\n    useEffect(() => {\n        if (appointmentsInit) {\n            localStorage.setItem('appointments', JSON.stringify(appointments));\n        } else {\n            localStorage.setItem('appointments', JSON.stringify([]));\n        }\n    }, [appointments, appointmentsInit]);\n\n    const createAppointment = appointment => {\n        setAppointments([\n            ...appointments,\n            appointment\n        ]);\n    }\n\n    const deleteAppointmentForId = id => {\n        const newAppointments = appointments.filter(appointment => appointment.id !== id);\n\n        setAppointments(newAppointments);\n    }\n\n    const title = appointments.length === 0 ? 'No hay citas' : 'Administra tus Citas';\n\n    return (\n        <Fragment>\n            <h1>Administrador de Pacientes</h1>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"one-half column\">\n                        <Form createAppointment={createAppointment}/>\n                    </div>\n                    <div className = \"one-half column\" >\n                        <h2>{title}</h2>\n                        {appointments.map(appointment => (\n                            <Appointment key={appointment.id}\n                                appointment={appointment}\n                                deleteAppointmentForId={deleteAppointmentForId}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}